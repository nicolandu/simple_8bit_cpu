  outp | addr | data

  --:- |    0 |             ; bcd:
  --:- |    5 |             ; bin_val:
   0:0 | 8000 |             ; start:
   0:0 | 8000 | 68 ff       ; mov # 0xFF, sp
   2:0 | 8002 | 78 01       ; outmode text
   4:0 | 8004 | 08 00       ; mov # 0x00, a
   6:0 | 8006 | 48 00       ; mov # 0x00, x
   8:0 | 8008 |             ; .loop:
   8:0 | 8008 | 28 05       ; mov a, bin_val
   a:0 | 800a | 59 06 00    ; mov x, (bin_val + 1)
   d:0 | 800d | 4e          ; push a
   e:0 | 800e | 6e          ; push x
   f:0 | 800f | 0c 3f 80    ; jsr double_dabble
  12:0 | 8012 | 18 04       ; mov (bcd + 4), a
  14:0 | 8014 | 02 24 30    ; add # "0", a
  17:0 | 8017 | 71          ; out a
  18:0 | 8018 | 18 03       ; mov (bcd + 3), a
  1a:0 | 801a | 02 24 30    ; add # "0", a
  1d:0 | 801d | 71          ; out a
  1e:0 | 801e | 18 02       ; mov (bcd + 2), a
  20:0 | 8020 | 02 24 30    ; add # "0", a
  23:0 | 8023 | 71          ; out a
  24:0 | 8024 | 18 01       ; mov (bcd + 1), a
  26:0 | 8026 | 02 24 30    ; add # "0", a
  29:0 | 8029 | 71          ; out a
  2a:0 | 802a | 18 00       ; mov bcd, a
  2c:0 | 802c | 02 24 30    ; add # "0", a
  2f:0 | 802f | 71          ; out a
  30:0 | 8030 | 74 0a       ; out # "\n"
  32:0 | 8032 | 6f          ; pop x
  33:0 | 8033 | 4f          ; pop a
  34:0 | 8034 | 02 24 01    ; add # 0x01, a
  37:0 | 8037 | 52          ; swap a, x
  38:0 | 8038 | 24 00       ; addc # 0x00, a
  3a:0 | 803a | 52          ; swap a, x
  3b:0 | 803b | 3c 08 80    ; jnc .loop
  3e:0 | 803e |             ; .halt:
  3e:0 | 803e | 01          ; hlt
  3f:0 | 803f |             ; double_dabble:
  3f:0 | 803f | 58 10       ; push # 0x10
  41:0 | 8041 | 08 00       ; mov # 0x00, a
  43:0 | 8043 | 28 00       ; mov a, bcd
  45:0 | 8045 | 28 01       ; mov a, (bcd + 1)
  47:0 | 8047 | 28 02       ; mov a, (bcd + 2)
  49:0 | 8049 | 28 03       ; mov a, (bcd + 3)
  4b:0 | 804b | 28 04       ; mov a, (bcd + 4)
  4d:0 | 804d |             ; .loop:
  4d:0 | 804d | 49 00 00    ; mov bcd, x
  50:0 | 8050 | 0a 81       ; mov (add_table, x), a
  52:0 | 8052 | 28 00       ; mov a, bcd
  54:0 | 8054 | 49 01 00    ; mov (bcd + 1), x
  57:0 | 8057 | 0a 81       ; mov (add_table, x), a
  59:0 | 8059 | 28 01       ; mov a, (bcd + 1)
  5b:0 | 805b | 49 02 00    ; mov (bcd + 2), x
  5e:0 | 805e | 0a 81       ; mov (add_table, x), a
  60:0 | 8060 | 28 02       ; mov a, (bcd + 2)
  62:0 | 8062 | 49 03 00    ; mov (bcd + 3), x
  65:0 | 8065 | 0a 81       ; mov (add_table, x), a
  67:0 | 8067 | 28 03       ; mov a, (bcd + 3)
  69:0 | 8069 | 49 04 00    ; mov (bcd + 4), x
  6c:0 | 806c | 0a 81       ; mov (add_table, x), a
  6e:0 | 806e | 28 04       ; mov a, (bcd + 4)
  70:0 | 8070 |             ; ..shift_value:
  70:0 | 8070 | 02 05 05 00 ; rol bin_val, 0
  74:0 | 8074 | 05 06 00    ; rolc (bin_val + 1)
  77:0 | 8077 | 05 00 00    ; rolc bcd
  7a:0 | 807a | 05 01 00    ; rolc (bcd + 1)
  7d:0 | 807d | 05 02 00    ; rolc (bcd + 2)
  80:0 | 8080 | 05 03 00    ; rolc (bcd + 3)
  83:0 | 8083 | 05 04 00    ; rolc (bcd + 4)
  86:0 | 8086 | 4f          ; pop a
  87:0 | 8087 | 03 24 fe    ; sub # 0x01, a
  8a:0 | 808a | 4e          ; push a
  8b:0 | 808b | 5c 4d 80    ; jnz .loop
  8e:0 | 808e | 3f          ; pop
  8f:0 | 808f | 5b          ; rts
 100:0 | 8100 |             ; add_table:
 100:0 | 8100 | 00          ; #d 0x00
 101:0 | 8101 | 01          ; #d 0x01
 102:0 | 8102 | 02          ; #d 0x02
 103:0 | 8103 | 03          ; #d 0x03
 104:0 | 8104 | 04          ; #d 0x04
 105:0 | 8105 | 80          ; #d 0x80
 106:0 | 8106 | 81          ; #d 0x81
 107:0 | 8107 | 82          ; #d 0x82
 108:0 | 8108 | 83          ; #d 0x83
 109:0 | 8109 | 84          ; #d 0x84
 10a:0 | 810a | 00          ; #d 0x00
 10b:0 | 810b | 00          ; #d 0x00
 10c:0 | 810c | 00          ; #d 0x00
 10d:0 | 810d | 00          ; #d 0x00
 10e:0 | 810e | 00          ; #d 0x00
 10f:0 | 810f | 00          ; #d 0x00
