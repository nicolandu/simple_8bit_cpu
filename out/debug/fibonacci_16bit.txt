  outp | addr | data

  --:- |    0 |          ; r0:
  --:- |    2 |          ; r1:
  --:- |    4 |          ; r2:
  --:- |    6 |          ; bcd:
   0:0 | 8000 |          ; start:
   0:0 | 8000 | 68 ff    ; mov # 0xFF, sp
   2:0 | 8002 | 78 01    ; outmode text
   4:0 | 8004 | 08 00    ; mov # 0x00, a
   6:0 | 8006 | 28 00    ; mov a, r0
   8:0 | 8008 | 28 01    ; mov a, (r0+1)
   a:0 | 800a | 28 03    ; mov a, (r1+1)
   c:0 | 800c | 08 01    ; mov # 0x01, a
   e:0 | 800e | 28 02    ; mov a, r1
  10:0 | 8010 | 48 10    ; mov # (string & 0x00FF), x
  12:0 | 8012 |          ; .string_output:
  12:0 | 8012 | 0a 81    ; mov (string & 0xFF00, x), a
  14:0 | 8014 | 54 00    ; or # 0x00, a
  16:0 | 8016 | 4c 1e 80 ; jz .end_string_output
  19:0 | 8019 | 71       ; out a
  1a:0 | 801a | 2f       ; inc x
  1b:0 | 801b | 1c 12 80 ; jmp .string_output
  1e:0 | 801e |          ; .end_string_output:
  1e:0 | 801e |          ; .loop:
  1e:0 | 801e | 18 00    ; mov r0, a
  20:0 | 8020 | 02 04 02 ; add r1, a
  23:0 | 8023 | 28 04    ; mov a, r2
  25:0 | 8025 | 18 01    ; mov (r0+1), a
  27:0 | 8027 | 04 03    ; addc (r1+1), a
  29:0 | 8029 | 28 05    ; mov a, (r2+1)
  2b:0 | 802b | 2c b0 80 ; jc .halt
  2e:0 | 802e | 18 02    ; mov r1, a
  30:0 | 8030 | 28 00    ; mov a, r0
  32:0 | 8032 | 18 03    ; mov (r1+1), a
  34:0 | 8034 | 28 01    ; mov a, (r0+1)
  36:0 | 8036 | 18 04    ; mov r2, a
  38:0 | 8038 | 28 02    ; mov a, r1
  3a:0 | 803a | 18 05    ; mov (r2+1), a
  3c:0 | 803c | 28 03    ; mov a, (r1+1)
  3e:0 | 803e | 58 10    ; push # 0x10
  40:0 | 8040 | 08 00    ; mov # 0x00, a
  42:0 | 8042 | 28 06    ; mov a, bcd
  44:0 | 8044 | 28 07    ; mov a, (bcd+1)
  46:0 | 8046 | 28 08    ; mov a, (bcd+2)
  48:0 | 8048 | 28 09    ; mov a, (bcd+3)
  4a:0 | 804a | 28 0a    ; mov a, (bcd+4)
  4c:0 | 804c |          ; ..double_dabble_loop:
  4c:0 | 804c | 49 06 00 ; mov bcd, x
  4f:0 | 804f | 0a 81    ; mov (add_table, x), a
  51:0 | 8051 | 28 06    ; mov a, bcd
  53:0 | 8053 | 49 07 00 ; mov (bcd+1), x
  56:0 | 8056 | 0a 81    ; mov (add_table, x), a
  58:0 | 8058 | 28 07    ; mov a, (bcd+1)
  5a:0 | 805a | 49 08 00 ; mov (bcd+2), x
  5d:0 | 805d | 0a 81    ; mov (add_table, x), a
  5f:0 | 805f | 28 08    ; mov a, (bcd+2)
  61:0 | 8061 | 49 09 00 ; mov (bcd+3), x
  64:0 | 8064 | 0a 81    ; mov (add_table, x), a
  66:0 | 8066 | 28 09    ; mov a, (bcd+3)
  68:0 | 8068 | 49 0a 00 ; mov (bcd+4), x
  6b:0 | 806b | 0a 81    ; mov (add_table, x), a
  6d:0 | 806d | 28 0a    ; mov a, (bcd+4)
  6f:0 | 806f | 05 04 00 ; rolc r2
  72:0 | 8072 | 05 05 00 ; rolc (r2+1)
  75:0 | 8075 | 05 06 00 ; rolc bcd
  78:0 | 8078 | 05 07 00 ; rolc (bcd+1)
  7b:0 | 807b | 05 08 00 ; rolc (bcd+2)
  7e:0 | 807e | 05 09 00 ; rolc (bcd+3)
  81:0 | 8081 | 05 0a 00 ; rolc (bcd+4)
  84:0 | 8084 | 4f       ; pop a
  85:0 | 8085 | 03 24 fe ; sub # 0x01, a
  88:0 | 8088 | 4e       ; push a
  89:0 | 8089 | 5c 4c 80 ; jnz ..double_dabble_loop
  8c:0 | 808c | 3f       ; pop
  8d:0 | 808d | 18 0a    ; mov (bcd+4), a
  8f:0 | 808f | 02 24 30 ; add # "0", a
  92:0 | 8092 | 71       ; out a
  93:0 | 8093 | 18 09    ; mov (bcd+3), a
  95:0 | 8095 | 02 24 30 ; add # "0", a
  98:0 | 8098 | 71       ; out a
  99:0 | 8099 | 18 08    ; mov (bcd+2), a
  9b:0 | 809b | 02 24 30 ; add # "0", a
  9e:0 | 809e | 71       ; out a
  9f:0 | 809f | 18 07    ; mov (bcd+1), a
  a1:0 | 80a1 | 02 24 30 ; add # "0", a
  a4:0 | 80a4 | 71       ; out a
  a5:0 | 80a5 | 18 06    ; mov bcd, a
  a7:0 | 80a7 | 02 24 30 ; add # "0", a
  aa:0 | 80aa | 71       ; out a
  ab:0 | 80ab | 74 0a    ; out # "\n"
  ad:0 | 80ad | 1c 1e 80 ; jmp .loop
  b0:0 | 80b0 |          ; .halt:
  b0:0 | 80b0 | 01       ; hlt
 100:0 | 8100 |          ; add_table:
 100:0 | 8100 | 00       ; #d 0x00
 101:0 | 8101 | 01       ; #d 0x01
 102:0 | 8102 | 02       ; #d 0x02
 103:0 | 8103 | 03       ; #d 0x03
 104:0 | 8104 | 04       ; #d 0x04
 105:0 | 8105 | 80       ; #d 0x80
 106:0 | 8106 | 81       ; #d 0x81
 107:0 | 8107 | 82       ; #d 0x82
 108:0 | 8108 | 83       ; #d 0x83
 109:0 | 8109 | 84       ; #d 0x84
 10a:0 | 810a | 00       ; #d 0x00
 10b:0 | 810b | 00       ; #d 0x00
 10c:0 | 810c | 00       ; #d 0x00
 10d:0 | 810d | 00       ; #d 0x00
 10e:0 | 810e | 00       ; #d 0x00
 10f:0 | 810f | 00       ; #d 0x00
 110:0 | 8110 |          ; string:
 110:0 | 8110 | 44 75 65 20 74 6f 20 74 65 63 68 6e 69 63 61 6c 20 72 65 61 73 6f 6e 73 2c 20 6f 6e 6c 79 20 74 68 65 20 46 69 62 6f 6e 61 63 63 69 20 6e 75 6d 62 65 72 73 20 3c 20 36 35 35 33 35 20 61 72 65 20 6f 75 74 70 75 74 2e 20 49 6e 20 72 65 61 6c 69 74 79 2c 20 74 68 65 79 20 63 6f 6e 74 69 6e 75 65 20 61 64 20 69 6e 66 69 6e 69 74 75 6d 2e 0a 0a 30 30 30 30 30 0a 30 30 30 30 31 0a 00 ; #d "Due to technical reasons, only the Fibonacci numbers < 65535 are output. In reality, they continue ad infinitum.\n\n00000\n00001\n\0"
 18f:0 | 818f |          ; string_end:
