 outp | addr | data

 --:- |    0 |             ; base:
 --:- |    1 |             ; exponent:
 --:- |    2 |             ; result:
 --:- |    4 |             ; mul_mask:
  0:0 | 8000 |             ; start:
  0:0 | 8000 | 68 ff       ; mov # 0xFF, sp
  2:0 | 8002 | 08 ff       ; mov # 0xFF, a
  4:0 | 8004 | 28 00       ; mov a, base
  6:0 | 8006 | 08 ff       ; mov # 0xFF, a
  8:0 | 8008 | 28 01       ; mov a, exponent
  a:0 | 800a | 0c 14 80    ; jsr exponentiate
  d:0 | 800d | 18 03       ; mov (result + 1), a
  f:0 | 800f | 71          ; out a
 10:0 | 8010 | 18 02       ; mov result, a
 12:0 | 8012 | 71          ; out a
 13:0 | 8013 | 01          ; hlt
 14:0 | 8014 |             ; exponentiate:
 14:0 | 8014 | 18 01       ; mov exponent, a
 16:0 | 8016 | 48 00       ; mov # 0x00, x
 18:0 | 8018 | 03 24 fe    ; sub # 0x01, a
 1b:0 | 801b | 2c 26 80    ; jc .skip_early_return
 1e:0 | 801e | 08 01       ; mov # 0x01, a
 20:0 | 8020 | 28 02       ; mov a, result
 22:0 | 8022 | 59 03 00    ; mov x, (result + 1)
 25:0 | 8025 | 5b          ; rts
 26:0 | 8026 |             ; .skip_early_return:
 26:0 | 8026 | 28 01       ; mov a, exponent
 28:0 | 8028 | 18 00       ; mov base, a
 2a:0 | 802a | 28 02       ; mov a, result
 2c:0 | 802c | 59 03 00    ; mov x, (result + 1)
 2f:0 | 802f |             ; .multiply:
 2f:0 | 802f | 58 00       ; push # 0
 31:0 | 8031 | 58 00       ; push # 0
 33:0 | 8033 | 38 01       ; mov # 0b1, b
 35:0 | 8035 |             ; ..loop:
 35:0 | 8035 | 18 00       ; mov base, a
 37:0 | 8037 | 63          ; and b, a
 38:0 | 8038 | 29 04 00    ; mov b, mul_mask
 3b:0 | 803b | 4c 4b 80    ; jz ..skip_add
 3e:0 | 803e | 4f          ; pop a
 3f:0 | 803f | 02 25 02 00 ; add result, a
 43:0 | 8043 | 5f          ; pop b
 44:0 | 8044 | 4e          ; push a
 45:0 | 8045 | 35 03 00    ; addc (result + 1), b
 48:0 | 8048 | 4f          ; pop a
 49:0 | 8049 | 5e          ; push b
 4a:0 | 804a | 4e          ; push a
 4b:0 | 804b |             ; ..skip_add:
 4b:0 | 804b | 02 05 02 00 ; rol result, 0
 4f:0 | 804f | 05 03 00    ; rolc (result+1)
 52:0 | 8052 | 39 04 00    ; mov mul_mask, b
 55:0 | 8055 | 02 0f       ; rol b, 0
 57:0 | 8057 | 5c 35 80    ; jnz ..loop
 5a:0 | 805a | 4f          ; pop a
 5b:0 | 805b | 28 02       ; mov a, result
 5d:0 | 805d | 4f          ; pop a
 5e:0 | 805e | 28 03       ; mov a, (result + 1)
 60:0 | 8060 | 18 01       ; mov exponent, a
 62:0 | 8062 | 03 24 fe    ; sub # 0x01, a
 65:0 | 8065 | 28 01       ; mov a, exponent
 67:0 | 8067 | 5c 2f 80    ; jnz .multiply
 6a:0 | 806a | 5b          ; rts
